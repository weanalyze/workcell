"use strict";(self.webpackChunkworkcell_doc=self.webpackChunkworkcell_doc||[]).push([[3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(n),d=l,k=s["".concat(c,".").concat(d)]||s[d]||m[d]||a;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[s]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),l=(n(7294),n(3905));const a={sidebar_position:2},o="Create a workcell",i={unversionedId:"guides/create-a-workcell",id:"guides/create-a-workcell",title:"Create a workcell",description:"Say hello to workcell",source:"@site/docs/guides/create-a-workcell.md",sourceDirName:"guides",slug:"/guides/create-a-workcell",permalink:"/workcell/docs/guides/create-a-workcell",draft:!1,editUrl:"https://github.com/weanalyze/workcell/edit/main/docs/guides/create-a-workcell.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/workcell/docs/guides/installation"},next:{title:"Workcell integration",permalink:"/workcell/docs/guides/workcell-integration"}},c={},p=[{value:"Say hello to workcell",id:"say-hello-to-workcell",level:2},{value:"Workcell compatible function",id:"workcell-compatible-function",level:2},{value:"Start from a template",id:"start-from-a-template",level:2}],u={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"create-a-workcell"},"Create a workcell"),(0,l.kt)("h2",{id:"say-hello-to-workcell"},"Say hello to workcell"),(0,l.kt)("p",null,"You can start by running following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"workcell hello\n")),(0,l.kt)("p",null,"This command do following steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Init a ",(0,l.kt)("inlineCode",{parentName:"p"},"hello_workcell")," workcell project in current folder.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Serve ",(0,l.kt)("inlineCode",{parentName:"p"},"hello_workcell")," workcell app"))),(0,l.kt)("p",null,"Now you can visit ",(0,l.kt)("inlineCode",{parentName:"p"},"127.0.0.1:7860/ui")," to visit a running workcell UI, or check the automatically generated Swagger UI. "),(0,l.kt)("h2",{id:"workcell-compatible-function"},"Workcell compatible function"),(0,l.kt)("p",null,"You have no need to implement any UI or API features yourself, if your function is ",(0,l.kt)("strong",{parentName:"p"},"workcell compatible"),", you can serve it by workcell directly."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"A workcell-compatible function must have an input parameter and return value based on ",(0,l.kt)("a",{parentName:"p",href:"https://docs.pydantic.dev/"},"Pydantic models"),". The input and output models are specified using ",(0,l.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/typing.html"},"type hints"),".")),(0,l.kt)("p",null,"Here is an example of a simple ",(0,l.kt)("strong",{parentName:"p"},"workcell compatible")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel\n\nclass Input(BaseModel):\n    message: str\n\nclass Output(BaseModel):\n    message: str\n\ndef hello_workcell(input: Input) -> Output:\n    """Returns the `message` of the input data."""\n    return Output(message=input.message)\n')),(0,l.kt)("p",null,"The function ",(0,l.kt)("inlineCode",{parentName:"p"},"hello_workcell")," can be served & deployed directly by workcell."),(0,l.kt)("h2",{id:"start-from-a-template"},"Start from a template"),(0,l.kt)("p",null,"Or if you want to explore more details, you can start from a template, use ",(0,l.kt)("inlineCode",{parentName:"p"},"workcell new")," command as below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"workcell new {PROJECT_NAME}\n")),(0,l.kt)("p",null,"A new folder named as ",(0,l.kt)("inlineCode",{parentName:"p"},"{PROJECT_NAME}")," will be created into current folder. "),(0,l.kt)("p",null,"You can apply your change in ",(0,l.kt)("inlineCode",{parentName:"p"},"{PROJECT_NAME}")," folder, such as modify ",(0,l.kt)("inlineCode",{parentName:"p"},"app.py")," and rename your main function name into ",(0,l.kt)("inlineCode",{parentName:"p"},"FUNCTION_NAME"),"."),(0,l.kt)("p",null,"After modification, you can run workcell app by:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"workcell serve {PROJECT_NAME}.app:{FUNCTION_NAME}\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The output will display the location where the API is being served, default running port is ",(0,l.kt)("inlineCode",{parentName:"p"},"7860"),".")))}m.isMDXComponent=!0}}]);